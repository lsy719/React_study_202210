{"ast":null,"code":"var _jsxFileName = \"D:\\\\study\\\\learn04_React\\\\react_staging\\\\src\\\\components\\\\Search\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport PubSub from 'pubsub-js'; // import axios from 'axios';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Search extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.search = async () => {\n      // 获取用户的输入\n      const {\n        keyWordElement: {\n          value: data\n        }\n      } = this; //解构赋值的连续写法+重命名\n      // 发送请求前通知List更新状态\n\n      PubSub.publish('name', {\n        isFirst: false,\n        isLoading: true\n      }); // 发送网络请求--使用axios\n\n      /* axios.get(`api2/?q=${data}`).then(\r\n        res => {\r\n          PubSub.publish('name',{isFirst:false, isLoading:false, users: res.data.items})\r\n        },\r\n        err => {\r\n          PubSub.publish('name',{isFirst:false, isLoading:false, err: err.message})\r\n        },\r\n      ) */\n      // 发送网络请求--使用fetch发送（未优化）\n      // fetch(`api2/?q=${data}`).then(\n      //   res => {\n      //     console.log('联系服务器成功了');\n      //     return res.json(); //返回的是一个promise，因为返回的是promise，所以then的状态同此promise\n      //     // 断网返回非promise值，包括undefined，走成功\n      //   },\n      //   err => {\n      //     console.log('联系服务器失败了', err); \n      //     return new Promise(); //终端promise链，返回一个初始化状态的promise，永远为pending\n      //   }\n      // ).then(\n      //   res => {\n      //     console.log('获取数据成功',res)\n      //   },\n      //   err => {\n      //     console.log('获取数据失败',err)\n      //   }\n      // )\n      // 发送网络请求--使用fetch发送（优化）\n      // fetch(`api2/?q=${data}`).then(\n      //   res => {\n      //     console.log('联系服务器成功了');\n      //     return res.json(); //返回的是一个promise，因为返回的是promise，所以then的状态同此promise\n      //     // 断网返回非promise值，包括undefined，走成功\n      //   }\n      // ).then(\n      //   res => {\n      //     console.log('获取数据成功',res.items);\n      //     PubSub.publish('name',{isFirst:false, isLoading:false, users: res.items})\n      //   }\n      // ).catch(\n      //   err => {\n      //     console.log('请求出错',err);\n      //   }\n      // )\n\n      try {\n        // await只能等到成功的结果，用try catch处理异常\n        const res = await fetch(`api2/?q=${data}`);\n        const resData = await res.json();\n        PubSub.publish('name', {\n          isFirst: false,\n          isLoading: false,\n          users: resData.items\n        });\n      } catch {\n        console.log('');\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"jumbotron\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"jumbotron-heading\",\n        children: \"\\u641C\\u7D22 Github \\u7528\\u6237\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: c => this.keyWordElement = c,\n          type: \"text\",\n          placeholder: \"\\u8F93\\u5165\\u5173\\u952E\\u8BCD\\u70B9\\u51FB\\u641C\\u7D22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.search,\n          children: \"\\u641C\\u7D22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 98\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","Component","PubSub","Search","search","keyWordElement","value","data","publish","isFirst","isLoading","res","fetch","resData","json","users","items","console","log","render","c"],"sources":["D:/study/learn04_React/react_staging/src/components/Search/index.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport PubSub from 'pubsub-js';\r\n// import axios from 'axios';\r\n\r\nexport default class Search extends Component {\r\n  search = async () => {\r\n    // 获取用户的输入\r\n    const {keyWordElement:{value:data}} = this; //解构赋值的连续写法+重命名\r\n    // 发送请求前通知List更新状态\r\n    PubSub.publish('name',{isFirst:false, isLoading:true})\r\n\r\n    // 发送网络请求--使用axios\r\n    /* axios.get(`api2/?q=${data}`).then(\r\n      res => {\r\n        PubSub.publish('name',{isFirst:false, isLoading:false, users: res.data.items})\r\n      },\r\n      err => {\r\n        PubSub.publish('name',{isFirst:false, isLoading:false, err: err.message})\r\n      },\r\n    ) */\r\n\r\n    // 发送网络请求--使用fetch发送（未优化）\r\n    // fetch(`api2/?q=${data}`).then(\r\n    //   res => {\r\n    //     console.log('联系服务器成功了');\r\n    //     return res.json(); //返回的是一个promise，因为返回的是promise，所以then的状态同此promise\r\n    //     // 断网返回非promise值，包括undefined，走成功\r\n    //   },\r\n    //   err => {\r\n    //     console.log('联系服务器失败了', err); \r\n    //     return new Promise(); //终端promise链，返回一个初始化状态的promise，永远为pending\r\n    //   }\r\n    // ).then(\r\n    //   res => {\r\n    //     console.log('获取数据成功',res)\r\n    //   },\r\n    //   err => {\r\n    //     console.log('获取数据失败',err)\r\n    //   }\r\n    // )\r\n\r\n    // 发送网络请求--使用fetch发送（优化）\r\n    // fetch(`api2/?q=${data}`).then(\r\n    //   res => {\r\n    //     console.log('联系服务器成功了');\r\n    //     return res.json(); //返回的是一个promise，因为返回的是promise，所以then的状态同此promise\r\n    //     // 断网返回非promise值，包括undefined，走成功\r\n    //   }\r\n    // ).then(\r\n    //   res => {\r\n    //     console.log('获取数据成功',res.items);\r\n    //     PubSub.publish('name',{isFirst:false, isLoading:false, users: res.items})\r\n    //   }\r\n    // ).catch(\r\n    //   err => {\r\n    //     console.log('请求出错',err);\r\n    //   }\r\n    // )\r\n\r\n    try{\r\n      // await只能等到成功的结果，用try catch处理异常\r\n      const res = await fetch(`api2/?q=${data}`);\r\n      const resData = await res.json();\r\n      PubSub.publish('name',{isFirst:false, isLoading:false, users: resData.items})\r\n    }catch{\r\n      console.log('')\r\n    }\r\n    \r\n  }\r\n  render() {\r\n    return (\r\n      <section className=\"jumbotron\">\r\n        <h3 className=\"jumbotron-heading\">搜索 Github 用户</h3>\r\n        <div>\r\n          <input ref = {c => this.keyWordElement = c} type=\"text\" placeholder=\"输入关键词点击搜索\"/>&nbsp;<button onClick={this.search}>搜索</button>\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,WAAnB,C,CACA;;;AAEA,eAAe,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;EAAA;IAAA;;IAAA,KAC5CG,MAD4C,GACnC,YAAY;MACnB;MACA,MAAM;QAACC,cAAc,EAAC;UAACC,KAAK,EAACC;QAAP;MAAhB,IAAgC,IAAtC,CAFmB,CAEyB;MAC5C;;MACAL,MAAM,CAACM,OAAP,CAAe,MAAf,EAAsB;QAACC,OAAO,EAAC,KAAT;QAAgBC,SAAS,EAAC;MAA1B,CAAtB,EAJmB,CAMnB;;MACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MAEI;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA,IAAG;QACD;QACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,WAAUL,IAAK,EAAjB,CAAvB;QACA,MAAMM,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB;QACAZ,MAAM,CAACM,OAAP,CAAe,MAAf,EAAsB;UAACC,OAAO,EAAC,KAAT;UAAgBC,SAAS,EAAC,KAA1B;UAAiCK,KAAK,EAAEF,OAAO,CAACG;QAAhD,CAAtB;MACD,CALD,CAKC,MAAK;QACJC,OAAO,CAACC,GAAR,CAAY,EAAZ;MACD;IAEF,CAhE2C;EAAA;;EAiE5CC,MAAM,GAAG;IACP,oBACE;MAAS,SAAS,EAAC,WAAnB;MAAA,wBACE;QAAI,SAAS,EAAC,mBAAd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,wBACE;UAAO,GAAG,EAAIC,CAAC,IAAI,KAAKf,cAAL,GAAsBe,CAAzC;UAA4C,IAAI,EAAC,MAAjD;UAAwD,WAAW,EAAC;QAApE;UAAA;UAAA;UAAA;QAAA,QADF,uBACyF;UAAQ,OAAO,EAAE,KAAKhB,MAAtB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADzF;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAQD;;AA1E2C"},"metadata":{},"sourceType":"module"}